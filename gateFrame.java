/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nn_project;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.lang.reflect.Array;
import java.util.ArrayList;
import static nn_project.NN_Frame.combobox;

/**
 *
 * @author ThinkPad
 */
public class gateFrame extends javax.swing.JFrame {
    Graphics g;
    double w1,w2,DeltaW1,DeltaW2,DeltaThre=0;
    double threshold=0;
    double learningRate=0;
    double min,max=0;
    int[] Ainput={0,1,0,1};
    int[] Binput={0,0,1,1};
    int[] outputDesired;
    ArrayList<Double> errors = new ArrayList<>();
    double y2,x2, x1, y1;
    int epoch_num=0;
    int epoch=0;
    double w13,w14,w23,w24,w35,w45, thre3,thre4,thre5,x3,x4,x5,y3,y4,y5,e,gradientError5;
    double dw35, dw45, dthre5,gradientError3, gradientError4,dw13, dw23,dthre3,dw14,dw24,dthre4, derevative;  
    double mn, mx;
    int iteration =1;
   // int iterationNum=0;
    /**
     * Creates new form gateFrame
     */
    public gateFrame() {
        initComponents();
    }
/*
    gateFrame(int epochNum) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    epoch_num=epochNum;
    System.out.print(epoch_num);
    }
*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Alabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Bvalue = new javax.swing.JTextField();
        Avalue = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        Yvalue = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Iteration = new javax.swing.JTextField();
        epochNum = new javax.swing.JTextField();
        Error = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setLayout(null);

        titleLabel.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("       Solving Not gate Using Neural  Network");
        titleLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        jPanel1.add(titleLabel);
        titleLabel.setBounds(190, 20, 720, 80);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nn_project/XY_Axis.jpg"))); // NOI18N
        jPanel1.add(jLabel3);
        jLabel3.setBounds(230, 140, 680, 480);

        Alabel.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        Alabel.setForeground(new java.awt.Color(255, 255, 255));
        Alabel.setText("Enter A value:");
        jPanel1.add(Alabel);
        Alabel.setBounds(1010, 230, 160, 25);

        jLabel4.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Enter B value:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(1010, 280, 130, 25);
        jPanel1.add(Bvalue);
        Bvalue.setBounds(1140, 280, 130, 30);
        jPanel1.add(Avalue);
        Avalue.setBounds(1140, 230, 130, 30);

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(940, 460, 340, 10);
        jPanel1.add(Yvalue);
        Yvalue.setBounds(1140, 390, 130, 30);

        jLabel2.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Y value:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(1060, 390, 80, 25);

        jLabel6.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("The Number of Iteration:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(910, 490, 230, 25);

        jLabel8.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("The Error:");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(1040, 570, 100, 30);

        jLabel7.setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("The Number of Epoch:");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(930, 520, 210, 30);
        jPanel1.add(Iteration);
        Iteration.setBounds(1140, 490, 130, 30);
        jPanel1.add(epochNum);
        epochNum.setBounds(1140, 530, 130, 30);
        jPanel1.add(Error);
        Error.setBounds(1140, 570, 130, 30);

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 51));
        jButton1.setText("Find Output");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(1140, 330, 130, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nn_project/8.jpg"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, -10, 1280, 740);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1279, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getEpochNum(int num){
    epoch_num=num;
    }
    public void initaliztion_Perceptron()  {
        min=0;
        max=0.5;
        w1=Math.random()*(max-min+1)+min;
        w2=Math.random()*(max-min+1)+min;
        min=0;
        max=1;
        threshold=Math.random()*(max-min+1)+min;
        learningRate=Math.random();

                }
    public void initaliztion_MultiLayer(){
        min=-2.4/2;
        max=2.4/2;
        w13=Math.random()*(max-min+1)+min;
        w14=Math.random()*(max-min+1)+min;
        w23=Math.random()*(max-min+1)+min;
        w24=Math.random()*(max-min+1)+min;
        w35=Math.random()*(max-min+1)+min;
        w45=Math.random()*(max-min+1)+min;
        thre3=Math.random()*(max-min+1)+min;
        thre4=Math.random()*(max-min+1)+min;
        thre5=Math.random()*(max-min+1)+min;
        learningRate=Math.random();
    }
    public int StepFun(double BigX) {
     if (BigX>=0)   
         return 1;
     else return 0;
    }
    public double Tansh(double x){
          return (2/((1+Math.exp(-2*x)) ) )-1 ;
      }
    public void pereptron(){
        double MSE=1;
        initaliztion_Perceptron();
        double BigX=0;
        double y=0;
        double error=0;
        System.out.print(epoch_num);
        for(int w=0; w<epoch_num;w++){
           
        for(int i=0;i<4;i++)
        {
            BigX=(Ainput[i]*w1)+(Binput[i]*w2)-threshold;
            y=StepFun(BigX);
            error= outputDesired[i]- y; 
            errors.add(error);       
            if(error!=0) {
            DeltaW1= (learningRate*Ainput[i]*error);
            w1+=DeltaW1;
            DeltaW2= (learningRate*Binput[i]*error);
            w2+= DeltaW2;
            DeltaThre=(learningRate*-1*error);
            threshold+= DeltaThre;
            }  
            iteration++;
        }
         epoch++;
         double sum=0;
         
         
        for(int x=0;x<4;x++){
            sum= sum +(errors.get(x)*errors.get(x));
                }
        MSE= sum/4;
         System.out.print("MSe= "+MSE+"\n");
        if (MSE==0){
            break;
            
        }
      
        errors.clear();
       }
    System.out.print("            ////epoch = "+epoch);
    DrawLine(w1,w2,threshold);
    Iteration.setText(""+iteration);
    epochNum.setText(""+epoch);
    Error.setText(""+MSE);
    
    }
    public void MultiLayer(){
         double MSE=1;
       initaliztion_MultiLayer();
     
       for(int w=0; w<epoch_num;w++)
       {
        for(int i=0;i<4;i++)
        {
            x3= (Ainput[i]*w13)+(Binput[i]*w23)-thre3;   
            x4= (Ainput[i]*w14)+(Binput[i]*w24)-thre4; 
         
            y3= Tansh(x3);
            y4= Tansh(x4);
            x5= (y3*w35)+(y4*w45)-thre5;
            y5=x5; //linear fun
            e= outputDesired[i]- y5; 
            errors.add(e);
            gradientError5=e;
            
            dw35=  learningRate*y3*gradientError5;
            dw45=  learningRate*y4*gradientError5;
            dthre5= learningRate*-1*gradientError5;
     
            gradientError3=(1-(y3*y3))*gradientError5*w35;
        
            gradientError4=(1-(y4*y4))*gradientError5*w45;
            
            dw13=  learningRate*Ainput[i]*gradientError3;
            dw23=  learningRate*Binput[i]*gradientError3;
            dthre3= learningRate*-1*gradientError3;
            dw14=  learningRate*Ainput[i]*gradientError4; 
            dw24=  learningRate*Binput[i]*gradientError4;
            dthre4= learningRate*-1*gradientError4;
            
            w13+=dw13;
            w14+=dw14;
            w23+=dw23;
            w24+=dw24;
            w35+=dw35;
            w45+=dw45;
            thre3+=dthre3;
            thre4+=dthre4;
            thre5+=dthre5; 
            iteration++;
       
        }
        
        epoch++;
        double sum=0;
       
        for(int x=0;x<4;x++) 
         {
        sum= sum +(errors.get(x)*errors.get(x));
         }
        MSE= sum/4;
        if (MSE< 0.001)
            break;
         
        errors.clear();
        }
        System.out.print("\n ********************************************\n "+" w13= " +w13 + "  w23 = "+w23 + "  w14= "+w14+ "  w24= "+w24+ "  thre 3= "+ thre3+  "  thre 4= "+ thre4 +"\n" );
        DrawLineMultiLayer(w13, w23, w14,w24, thre3,thre4);
        Iteration.setText(""+iteration);
        epochNum.setText(""+epoch);
        Error.setText(""+MSE);

     }
    
    public void  DrawLineInverse(Double w1, Double w2, Double threshold) {
        System.out.print(" w1=  "+w1+"  w2=  "+w2+"\n");
        System.out.print("  thre=  "+threshold);
        x1=2;
        y1 = ((-w1/w2)*x1) + (threshold/w2);
        y2=-2;
        x2 = ((-w2/w1)*y2) + (threshold/w1);
        int width =680; //707
        int height = 480;//496 1000
        
        double  a1  =  ( (x1 +0.5) / (3 +0.5) * width);
        double  b1  = (( 2 - y1) / (2.25 +0.25) * height );
        double  a2  = ( (x2 +0.5) / (3 +0.5) * width);
        double  b2 =  ( (2 - y2) / (2.25 +0.25) * height );
        g =jLabel3.getGraphics();
        g.setColor(Color.red);  
        Graphics2D g2d = (Graphics2D) g;
        g2d.draw(new Line2D.Double(a1,b1,a2,b2));
         
    }
    public void DrawLineMultiLayer(Double w13, Double w23, Double w14,Double w24, Double  thre3,  Double  thre4 ){
        if((w13<0||w23<0 )&&(w24<0||w14<0))
        {
            DrawLineInverse(w13, w23, thre3);
            DrawLineInverse(w14, w24, thre4);
        }
        else
        { 
        DrawLine(w13, w23, thre3);
        DrawLine(w14, w24, thre4);
        }
    }
    public void  DrawLine(Double w1, Double w2, Double threshold){
        System.out.print(" w1=  "+w1+"  w2=  "+w2+"\n");
        System.out.print("  thre=  "+threshold);
        x1=-2;
        y1 = ((-w1/w2)*x1) + (threshold/w2);
        y2=-2;
        x2 = ((-w2/w1)*y2) + (threshold/w1);
        int width =680; //707
        int height = 480;//496 1000
        
        double  a1  =  ( (x1 +0.5) / (3 +0.5) * width);
        double  b1  = (( 2 - y1) / (2.25 +0.25) * height );
        double  a2  = ( (x2 +0.5) / (3 +0.5) * width);
        double  b2 =  ( (2 - y2) / (2.25 +0.25) * height );
       
        g =jLabel3.getGraphics();
        g.setColor(Color.red);  
        Graphics2D g2d = (Graphics2D) g;
        g2d.draw(new Line2D.Double(a1,b1,a2,b2));
        System.out.print( "\n x1= "+a1+"  y1 = "+ (b1)+"x2= "+(a2)+"  y2 = "+(b2));
     
      }    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
         g=getGraphics();
         int index=combobox.getSelectedIndex();
         switch(index)
         {
             //AND
             case 0:
            
             g.setColor(Color.BLUE);
             g.fillOval(330, 582, 27, 27);
             g.fillOval(330, 382, 27, 27);
             g.fillOval(530, 582, 27, 27);
             g.setColor(Color.RED);
             g.fillRect(530, 382, 27, 27);
             outputDesired=new int[]{0,0,0,1};
             pereptron();
             break;   
             
             //OR
             case 1:
             g.setColor(Color.BLUE);
             g.fillOval(330, 582, 27, 27);
             g.setColor(Color.RED);
             g.fillRect(330, 382, 27, 27);
             g.fillRect(530, 582, 27, 27);
             g.fillRect(530, 382, 27, 27); 
             outputDesired=new int[]{0,1,1,1};
             pereptron();
             break; 
             
             //NAND
             case 2:
             g.setColor(Color.BLUE);
             g.fillOval(530, 382, 27, 27); 
             g.setColor(Color.RED);
             g.fillRect(330, 582, 27, 27);
             g.fillRect(330, 382, 27, 27);
             g.fillRect(530, 582, 27, 27);
             outputDesired=new int[]{1,1,1,0};
                pereptron();
             break; 
             
             //NOR
             case 3:
             g.setColor(Color.RED);
             g.fillRect(330, 582, 27, 27);
             g.setColor(Color.BLUE);
             g.fillOval(530, 382, 27, 27); 
             g.fillOval(330, 382, 27, 27);
             g.fillOval(530, 582, 27, 27);
             outputDesired=new int[]{1,0,0,0};
                pereptron();
             break; 
             
             //XOR
             case 4:
             g.setColor(Color.RED);
             g.fillRect(530, 582, 27, 27);
             g.fillRect(330, 382, 27, 27);
             g.setColor(Color.BLUE);
             g.fillOval(330, 582, 27, 27);
             g.fillOval(530, 382, 27, 27); 
             outputDesired=new int[]{0,1,1,0};
             MultiLayer();
             break; 
             
             //XNOR
             case 5:
             g.setColor(Color.RED);
             g.fillRect(530, 382, 27, 27);
             g.fillRect(330, 582, 27, 27);
             g.setColor(Color.BLUE);
             g.fillOval(330, 382, 27, 27);
             g.fillOval(530, 582, 27, 27); 
             outputDesired=new int[]{1,0,0,1};
             MultiLayer();
             break; 
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int A=Integer.parseInt(Avalue.getText());
        int B=Integer.parseInt(Bvalue.getText());
        int index=combobox.getSelectedIndex();
          if(index==0||index==1)
          {
           if(A>(((-w1/w2)*B) + (threshold/w2)))
               Yvalue.setText("1");
           else
               Yvalue.setText("0");
          }
          else if(index==2||index==3){
              if(A>(((-w1/w2)*B) + (threshold/w2)))
               Yvalue.setText("0");
           else
               Yvalue.setText("1");
          }
          else 
          {
        
            x3= (A*w13)+(B*w23)-thre3;   
            x4= (A*w14)+(B*w24)-thre4; 
            y3= Tansh(x3);
            y4= Tansh(x4);
            x5= (y3*w35)+(y4*w45)-thre5;
            y5=x5; 
            Yvalue.setText(Math.round(y5)+"");

          }
     
            
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gateFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Alabel;
    private javax.swing.JTextField Avalue;
    private javax.swing.JTextField Bvalue;
    private javax.swing.JTextField Error;
    private javax.swing.JTextField Iteration;
    private javax.swing.JTextField Yvalue;
    private javax.swing.JTextField epochNum;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    public javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
